import org.junit.Test;

import static matsishin.algoritms.BinarySearch.newBinarySearch;
import static matsishin.algoritms.BinarySearch.ordinaryBinarySearch;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;


public class BinarySearchTest {

    @Test
    public void binarySearch() {
        int[] testMass1 = {2073, 4690, 11047, 21302, 22743, 23168, 37128, 40950, 49930, 62413,
        62944, 74434, 79757, 79796, 88034, 92661, 102258, 131930, 136387,
        145148, 157620, 168815, 168864, 171014, 175899, 180541, 187112,
        193758, 195290, 201231, 210686, 213270, 214913, 220838, 221403,
        228925, 233567, 259359, 265852, 273679, 276340, 280683, 282031,
        290204, 294828, 311200, 336059, 351189, 352672, 363350, 387394,
        394258, 408029, 419084, 419702, 446826, 476412, 477979, 478138,
        478969, 504108, 530729, 536352, 537571, 562397, 581707, 589274,
        590917, 631294, 645223, 649944, 652381, 654209, 655563, 688624,
        695076, 703053, 726778, 730118, 735904, 742723, 744687, 758617,
        764754, 770278, 779486, 785203, 799440, 807756, 818915, 830904,
        867188, 896185, 901152, 919879, 964587, 968333, 976305, 986134, 999528};

        int element1=645223,pos1=69,finedPos1=ordinaryBinarySearch(testMass1,element1);

        int[] testMass2={-11755, -8456, -7944, -7298, -6632, -3164, -3091, -2875, -1474, -565,
        719, 1421, 2027, 2947, 3920, 5775, 7641, 8137, 9400, 11453, 12080,
        13024, 13647, 13990, 15366, 15545, 17216, 17886, 20942, 21394, 22882,
        23774, 27088, 27675, 29344, 29711, 29957, 30548, 31070, 31845, 31976,
        32489, 33522, 33725, 34104, 35842, 36264, 36972, 37226, 39568, 39772,
        40332, 41200, 41574, 44494, 44676, 47132, 49438, 49461, 49806, 50062,
        54878, 55396, 58168, 58689, 59974, 62195, 62389, 63884, 64764, 67666,
        67699, 67803, 68872, 71605, 71834, 72160, 72181, 72729, 72896, 73207,
        74292, 74356, 76374, 76560, 76616, 78756, 79133, 79135, 80671, 80790,
        82376, 83489, 83607, 83847, 84106, 84442, 85023, 85487, 85632};

        int element2=27088,pos2=32,finedPos2=ordinaryBinarySearch(testMass2,element2);

        assertEquals("wrong position in mass1",finedPos1,pos1);
        assertEquals("wrong position in mass2",finedPos2,pos2);
    }

    @Test
    public void modifiedBinarySearch() {
        int[] shiftedTestMass1 = {536352, 537571, 562397, 581707, 589274,
                590917, 631294, 645223, 649944, 652381, 654209, 655563, 688624,
                695076, 703053, 726778, 730118, 735904, 742723, 744687, 758617,
                764754, 770278, 779486, 785203, 799440, 807756, 818915, 830904,
                867188, 896185, 901152, 919879, 964587, 968333, 976305, 986134, 999528,
                2073, 4690, 11047, 21302, 22743, 23168, 37128, 40950, 49930, 62413,
                62944, 74434, 79757, 79796, 88034, 92661, 102258, 131930, 136387,
                145148, 157620, 168815, 168864, 171014, 175899, 180541, 187112,
                193758, 195290, 201231, 210686, 213270, 214913, 220838, 221403,
                228925, 233567, 259359, 265852, 273679, 276340, 280683, 282031,
                290204, 294828, 311200, 336059, 351189, 352672, 363350, 387394,
                394258, 408029, 419084, 419702, 446826, 476412, 477979, 478138,
                478969, 504108, 530729};

        int element1=645223,pos1=7;
        int ordSearchRes1=ordinaryBinarySearch(shiftedTestMass1,element1);
        int newSearchRes1=newBinarySearch(shiftedTestMass1,element1);

        int[] shiftedTestMass2={ 62389, 63884, 64764, 67666,
                67699, 67803, 68872, 71605, 71834, 72160, 72181, 72729, 72896, 73207,
                74292, 74356, 76374, 76560, 76616, 78756, 79133, 79135, 80671, 80790,
                82376, 83489, 83607, 83847, 84106, 84442, 85023, 85487, 85632,
                -11755, -8456, -7944, -7298, -6632, -3164, -3091, -2875, -1474, -565,
                719, 1421, 2027, 2947, 3920, 5775, 7641, 8137, 9400, 11453, 12080,
                13024, 13647, 13990, 15366, 15545, 17216, 17886, 20942, 21394, 22882,
                23774, 27088, 27675, 29344, 29711, 29957, 30548, 31070, 31845, 31976,
                32489, 33522, 33725, 34104, 35842, 36264, 36972, 37226, 39568, 39772,
                40332, 41200, 41574, 44494, 44676, 47132, 49438, 49461, 49806, 50062,
                54878, 55396, 58168, 58689, 59974, 62195};

        int element2=-8456,pos2=34;

        int ordSearchRes2=ordinaryBinarySearch(shiftedTestMass2,element2);
        int newSearchRes2=newBinarySearch(shiftedTestMass2,element2);

        assertFalse("wrong position in mass1",ordSearchRes1==pos1);
        assertFalse("wrong position in mass2",ordSearchRes2==pos2);

        assertTrue("wrong position in mass1",newSearchRes1==pos1);
        assertTrue("wrong position in mass2",newSearchRes2==pos2);

    }

    @Test
    public void modifiedBinarySearchEveryTest() {
        int[] testMass={ 62389, 63884, 64764, 67666,
                67699, 67803, 68872, 71605, 71834, 72160, 72181, 72729, 72896, 73207,
                74292, 74356, 76374, 76560, 76616, 78756, 79133, 79135, 80671, 80790,
                82376, 83489, 83607, 83847, 84106, 84442, 85023, 85487, 85632,
                -11755, -8456, -7944, -7298, -6632, -3164, -3091, -2875, -1474, -565,
                719, 1421, 2027, 2947, 3920, 5775, 7641, 8137, 9400, 11453, 12080,
                13024, 13647, 13990, 15366, 15545, 17216, 17886, 20942, 21394, 22882,
                23774, 27088, 27675, 29344, 29711, 29957, 30548, 31070, 31845, 31976,
                32489, 33522, 33725, 34104, 35842, 36264, 36972, 37226, 39568, 39772,
                40332, 41200, 41574, 44494, 44676, 47132, 49438, 49461, 49806, 50062,
                54878, 55396, 58168, 58689, 59974, 62195};

        for (int i=0;i<testMass.length;i++) {
            assertTrue("wrong in "+i+" position",newBinarySearch(testMass,testMass[i])==i);
        }
    }

    @Test
    public void exampleTest(){
        int [] mas= {5, 6, 9, 10, 15, 1, 3, 4};

        for (int i=0;i<mas.length;i++) {
            assertTrue("wrong in "+i+" position",newBinarySearch(mas,mas[i])==i);
        }
    }
}


